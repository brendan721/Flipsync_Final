# FlipSync Python Project Configuration
# AGENT_CONTEXT: Unified Python tooling configuration for WSL/Remote VSCode
# AGENT_PRIORITY: Consistent formatting, linting, and type checking
# AGENT_PATTERN: Modern Python development standards

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "flipsync"
version = "1.0.0"
description = "FlipSync - AI-Powered E-commerce Platform"
authors = [
    {name = "FlipSync Team", email = "team@flipsync.com"}
]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "bandit>=1.7.0",
    "pycodestyle>=2.10.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    # Directories
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
  | node_modules
  | \.dart_tool
  | android
  | ios
  | web/build
  | mobile/flutter_app/android
  | mobile/flutter_app/ios
  | mobile/flutter_app/build
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = [
    "*/migrations/*",
    "*/node_modules/*",
    "*/.dart_tool/*",
    "*/android/*",
    "*/ios/*",
    "*/build/*",
    "*/venv/*",
    "*/.venv/*"
]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradually enable
disallow_incomplete_defs = false  # Gradually enable
check_untyped_defs = true
disallow_untyped_decorators = false  # Gradually enable
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true

# Exclude patterns
exclude = [
    "migrations/",
    "node_modules/",
    ".dart_tool/",
    "android/",
    "ios/",
    "build/",
    "venv/",
    ".venv/",
    "__pycache__/",
    ".pytest_cache/",
    ".mypy_cache/"
]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=fs_agt_clean",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80"
]
testpaths = [
    "tests",
    "fs_agt_clean/tests"
]
python_files = [
    "test_*.py",
    "*_test.py"
]
python_classes = [
    "Test*"
]
python_functions = [
    "test_*"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "agent: marks tests as AI agent tests",
    "mobile: marks tests as mobile integration tests"
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

# Coverage configuration
[tool.coverage.run]
source = ["fs_agt_clean"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/node_modules/*",
    "*/.dart_tool/*",
    "*/android/*",
    "*/ios/*",
    "*/build/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

# Bandit security linting
[tool.bandit]
exclude_dirs = [
    "tests",
    "migrations",
    "node_modules",
    ".dart_tool",
    "android",
    "ios",
    "build",
    "venv",
    ".venv"
]
skips = [
    "B101",  # assert_used - common in tests
    "B601",  # paramiko_calls - if using paramiko
    "B602",  # subprocess_popen_with_shell_equals_true - if needed
]
